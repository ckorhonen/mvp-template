name: Database Migrations

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run migrations'
        required: true
        type: choice
        options:
          - development
          - staging
          - production
      migration_file:
        description: 'Migration file to run (e.g., migrations/0001_initial_schema.sql)'
        required: true
        type: string

jobs:
  run-migration:
    name: Run Database Migration
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Wrangler
        run: npm install -g wrangler

      - name: Run migration
        run: |
          if [ "${{ inputs.environment }}" = "production" ]; then
            echo "⚠️  Running migration on PRODUCTION"
            wrangler d1 execute DB --env=production --file=${{ inputs.migration_file }}
          elif [ "${{ inputs.environment }}" = "staging" ]; then
            echo "Running migration on staging"
            wrangler d1 execute DB --env=staging --file=${{ inputs.migration_file }}
          else
            echo "Running migration on development"
            wrangler d1 execute DB --file=${{ inputs.migration_file }}
          fi
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Verify migration
        run: |
          echo "Verifying database state..."
          wrangler d1 execute DB --env=${{ inputs.environment }} --command="SELECT name FROM sqlite_master WHERE type='table'"
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
