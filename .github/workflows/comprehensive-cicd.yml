name: Comprehensive CI/CD Pipeline

on:
  push:
    branches: [main, develop, staging]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        type: choice
        options:
          - development
          - staging
          - production

env:
  NODE_VERSION: '20.x'

jobs:
  # ================================================
  # Code Quality & Testing
  # ================================================
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run type check
        run: npm run type-check

      - name: Run tests
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # ================================================
  # Security Scanning
  # ================================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Run Snyk Security Scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # ================================================
  # Build Frontend
  # ================================================
  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Upload frontend artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-dist
          path: dist/
          retention-days: 7

  # ================================================
  # Build Worker
  # ================================================
  build-worker:
    name: Build Worker
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build worker
        run: npm run build:worker

      - name: Upload worker artifacts
        uses: actions/upload-artifact@v3
        with:
          name: worker-dist
          path: dist/worker/
          retention-days: 7

  # ================================================
  # Database Migrations - Development
  # ================================================
  migrate-dev:
    name: Migrate Database (Dev)
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'development'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run D1 migrations (Dev)
        run: npx wrangler d1 migrations apply DB --env dev --remote
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

  # ================================================
  # Database Migrations - Staging
  # ================================================
  migrate-staging:
    name: Migrate Database (Staging)
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/staging' || github.event.inputs.environment == 'staging'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run D1 migrations (Staging)
        run: npx wrangler d1 migrations apply DB --env staging --remote
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

  # ================================================
  # Database Migrations - Production
  # ================================================
  migrate-production:
    name: Migrate Database (Production)
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://api.example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run D1 migrations (Production)
        run: npx wrangler d1 migrations apply DB --env production --remote
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

  # ================================================
  # Deploy to Development
  # ================================================
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build-worker, migrate-dev]
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'development'
    environment:
      name: development
      url: https://dev.mvp-template.workers.dev
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Deploy Worker (Dev)
        run: npx wrangler deploy --env dev
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Deployment notification
        if: always()
        run: |
          echo "Deployment to development: ${{ job.status }}"

  # ================================================
  # Deploy to Staging
  # ================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-worker, migrate-staging]
    if: github.ref == 'refs/heads/staging' || github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Deploy Worker (Staging)
        run: npx wrangler deploy --env staging
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Run smoke tests
        run: npm run test:smoke -- --env=staging
        continue-on-error: true

      - name: Deployment notification
        if: always()
        run: |
          echo "Deployment to staging: ${{ job.status }}"

  # ================================================
  # Deploy to Production
  # ================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-worker, migrate-production, security]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://api.example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Deploy Worker (Production)
        run: npx wrangler deploy --env production
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Run smoke tests
        run: npm run test:smoke -- --env=production
        continue-on-error: true

      - name: Create deployment tag
        run: |
          git tag "release-$(date +%Y%m%d-%H%M%S)"
          git push origin --tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deployment notification
        if: always()
        run: |
          echo "Deployment to production: ${{ job.status }}"

  # ================================================
  # Post-Deployment Health Check
  # ================================================
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Wait for deployment
        run: sleep 30

      - name: Check API health
        run: |
          curl --fail https://api.example.com/health || exit 1

      - name: Check worker status
        run: |
          curl --fail https://api.example.com/api/v1/status || exit 1

  # ================================================
  # Rollback on Failure
  # ================================================
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [health-check]
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Rollback to previous version
        run: npx wrangler rollback --env production
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Notify rollback
        run: |
          echo "⚠️ Production deployment failed. Rolled back to previous version."
