# Cloudflare Workers Configuration
# https://developers.cloudflare.com/workers/wrangler/configuration/

name = "mvp-template"
main = "src/worker/index.ts"
compatibility_date = "2024-01-15"
compatibility_flags = ["nodejs_compat"]

# Account ID - update with your Cloudflare account ID
# Get this from: https://dash.cloudflare.com/ -> Workers & Pages -> Account ID
# account_id = "your-account-id-here"

# Development configuration
workers_dev = true

# Build configuration
[build]
command = "npm run build"

# Observability
[observability]
enabled = true

# ============================================
# Cloudflare D1 Database Bindings
# ============================================
# Create database: wrangler d1 create mvp-template-db
# Then update the binding with the database_id from the output

[[d1_databases]]
binding = "DB"
database_name = "mvp-template-db"
database_id = "" # Add your D1 database ID here
# Preview ID for local development
# preview_database_id = "" # Optional: different DB for preview

# ============================================
# KV Namespace Bindings
# ============================================
# Create namespaces:
# wrangler kv:namespace create CACHE
# wrangler kv:namespace create SESSIONS

[[kv_namespaces]]
binding = "CACHE"
id = "" # Add your KV namespace ID here
# preview_id = "" # Optional: for local development

[[kv_namespaces]]
binding = "SESSIONS"
id = "" # Add your KV namespace ID here
# preview_id = "" # Optional: for local development

# ============================================
# R2 Bucket Bindings
# ============================================
# Create buckets:
# wrangler r2 bucket create mvp-template-files
# wrangler r2 bucket create mvp-template-assets

[[r2_buckets]]
binding = "FILES"
bucket_name = "mvp-template-files"
# preview_bucket_name = "mvp-template-files-preview" # Optional

[[r2_buckets]]
binding = "ASSETS"
bucket_name = "mvp-template-assets"
# preview_bucket_name = "mvp-template-assets-preview" # Optional

# ============================================
# Durable Objects (Optional)
# ============================================
# Uncomment and configure if using Durable Objects

# [[durable_objects.bindings]]
# name = "RATE_LIMITER"
# class_name = "RateLimiter"
# script_name = "mvp-template"

# [[migrations]]
# tag = "v1"
# new_classes = ["RateLimiter"]

# ============================================
# Analytics Engine (Optional)
# ============================================
# Uncomment if using Analytics Engine

# [[analytics_engine_datasets]]
# binding = "ANALYTICS"

# ============================================
# Environment Variables
# ============================================
# Non-sensitive configuration
# For secrets, use: wrangler secret put <KEY>

[vars]
ENVIRONMENT = "development"
API_BASE_URL = "http://localhost:8787"
ENABLE_AI_FEATURES = "true"
ENABLE_RATE_LIMITING = "false"
ALLOWED_ORIGINS = "*"

# ============================================
# Environment: Staging
# ============================================

[env.staging]
name = "mvp-template-staging"
route = { pattern = "staging.example.com/*", zone_name = "example.com" }
# or use workers_dev = true for *.workers.dev domain

[env.staging.vars]
ENVIRONMENT = "staging"
API_BASE_URL = "https://staging.example.com"
ALLOWED_ORIGINS = "https://staging.example.com,https://admin.staging.example.com"

# Staging-specific bindings (if different from default)
# [[env.staging.d1_databases]]
# binding = "DB"
# database_name = "mvp-template-staging-db"
# database_id = "your-staging-db-id"

# ============================================
# Environment: Production
# ============================================

[env.production]
name = "mvp-template-production"
route = { pattern = "api.example.com/*", zone_name = "example.com" }
# or use: routes = ["api.example.com/*", "example.com/api/*"]

[env.production.vars]
ENVIRONMENT = "production"
API_BASE_URL = "https://api.example.com"
ENABLE_RATE_LIMITING = "true"
ALLOWED_ORIGINS = "https://example.com,https://app.example.com"

# Production-specific bindings (if different from default)
# [[env.production.d1_databases]]
# binding = "DB"
# database_name = "mvp-template-production-db"
# database_id = "your-production-db-id"

# ============================================
# Secrets (manage via CLI)
# ============================================
# Set secrets using:
# wrangler secret put OPENAI_API_KEY --env production
# wrangler secret put OPENAI_API_KEY --env staging
# wrangler secret put OPENAI_API_KEY (for development)
#
# Required secrets:
# - OPENAI_API_KEY: Your OpenAI API key
# - AI_GATEWAY_ID: Your Cloudflare AI Gateway ID (if using AI Gateway)
# - AI_GATEWAY_URL: Your Cloudflare AI Gateway URL (default: https://gateway.ai.cloudflare.com/v1)

# ============================================
# Additional Configuration
# ============================================

# Limits
# [limits]
# cpu_ms = 50 # Maximum CPU time in milliseconds (default: 50)

# Custom domains (alternative to routes)
# [triggers]
# crons = ["0 0 * * *"] # Run daily at midnight

# Tail consumers for logging
# [[tail_consumers]]
# service = "my-log-consumer"

# Unsafe bindings (use with caution)
# [unsafe]
# bindings = [
#   { name = "MY_UNSAFE_BINDING", type = "...", ... }
# ]

# ============================================
# Setup Instructions
# ============================================
#
# 1. Install Wrangler: npm install -g wrangler
# 2. Login: wrangler login
# 3. Update account_id in this file
# 4. Create D1 database: wrangler d1 create mvp-template-db
# 5. Update database_id with output from step 4
# 6. Create KV namespaces:
#    - wrangler kv:namespace create CACHE
#    - wrangler kv:namespace create SESSIONS
# 7. Update KV ids with outputs from step 6
# 8. Create R2 buckets:
#    - wrangler r2 bucket create mvp-template-files
#    - wrangler r2 bucket create mvp-template-assets
# 9. Set secrets: wrangler secret put OPENAI_API_KEY
# 10. Run locally: npm run worker:dev
# 11. Deploy: npm run worker:deploy
